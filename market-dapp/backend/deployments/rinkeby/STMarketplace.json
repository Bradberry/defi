{
  "address": "0xe71921337a32F2a2049e85d2BDeDb1704eAf628C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "descartesAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedDataKey",
          "type": "bytes"
        }
      ],
      "name": "PurchaseAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "descartesIndex",
          "type": "uint256"
        }
      ],
      "name": "PurchaseChallenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSuccess",
          "type": "bool"
        }
      ],
      "name": "PurchaseFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "adId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "buyerKey",
          "type": "bytes"
        }
      ],
      "name": "PurchaseRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_ipfsPath",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_carBrand",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_track",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_simulator",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_season",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "carSetupSaved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_ipfsPath",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_carBrand",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "_simulator",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "skinSaved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_encryptedDataKey",
          "type": "bytes"
        }
      ],
      "name": "acceptPurchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addressToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_notificationId",
          "type": "uint256"
        }
      ],
      "name": "archiveNotification",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_privateKey",
          "type": "bytes"
        }
      ],
      "name": "challengePurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "descartesIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSuccess",
          "type": "bool"
        }
      ],
      "name": "finalizePurchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_adId",
          "type": "uint256"
        }
      ],
      "name": "getAd",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "dataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "encryptedDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "ipfsPath",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "testTemplateHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ContentMarketplace.Advertisement",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_adIds",
          "type": "uint256[]"
        }
      ],
      "name": "getAds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "dataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "encryptedDataHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "ipfsPath",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "testTemplateHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ContentMarketplace.Advertisement[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCarSetups",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "seller",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "dataHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "encryptedDataHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "ipfsPath",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "testTemplateHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ContentMarketplace.Advertisement",
              "name": "ad",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "carBrand",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "track",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "simulator",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "season",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "description",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "series",
                  "type": "string"
                }
              ],
              "internalType": "struct STMarketplace.carSetupInfo",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct STMarketplace.carSetup[]",
          "name": "setups",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        }
      ],
      "name": "getItemComments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "commentator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "review",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "date",
              "type": "string"
            }
          ],
          "internalType": "struct STMarketplace.comment[]",
          "name": "comments_to_return",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getNickname",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_notificationIds",
          "type": "uint256[]"
        }
      ],
      "name": "getNotifications",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "purchaseId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "message",
              "type": "string"
            },
            {
              "internalType": "enum ContentMarketplace.NotificationType",
              "name": "nType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "archive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "internalType": "struct ContentMarketplace.Notification[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberCars",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberSellers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberSkins",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        }
      ],
      "name": "getPurchase",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "adId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "buyerKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedDataKey",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "descartesIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            }
          ],
          "internalType": "struct ContentMarketplace.Purchase",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_purchaseIds",
          "type": "uint256[]"
        }
      ],
      "name": "getPurchases",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "adId",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "buyer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "buyerKey",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedDataKey",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "descartesIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            }
          ],
          "internalType": "struct ContentMarketplace.Purchase[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getResult",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_sellerNickname",
          "type": "string"
        }
      ],
      "name": "getSellerComments",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "commentator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "review",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "date",
              "type": "string"
            }
          ],
          "internalType": "struct STMarketplace.comment[]",
          "name": "comments_to_return",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSkins",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "seller",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "dataHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "encryptedDataHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "ipfsPath",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "testTemplateHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct ContentMarketplace.Advertisement",
              "name": "ad",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "carBrand",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "simulator",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "skinPic",
                  "type": "string"
                }
              ],
              "internalType": "struct STMarketplace.carSkinInfo",
              "name": "info",
              "type": "tuple"
            }
          ],
          "internalType": "struct STMarketplace.carSkin[]",
          "name": "skins",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "position",
              "type": "uint64"
            },
            {
              "internalType": "uint8",
              "name": "driveLog2Size",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "directValue",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "loggerIpfsPath",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "loggerRootHash",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "waitsProvider",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "needsLogger",
              "type": "bool"
            }
          ],
          "internalType": "struct DescartesInterface.Drive[]",
          "name": "drives",
          "type": "tuple[]"
        }
      ],
      "name": "instantiateCartesiVerification",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_address",
          "type": "uint256"
        }
      ],
      "name": "isCarSetup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isSeller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_address",
          "type": "uint256"
        }
      ],
      "name": "isSkin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_seller",
          "type": "address"
        }
      ],
      "name": "listAdsPerSeller",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "listNotificationsPerUser",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_ipfsPath",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_carBrand",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_track",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_simulator",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_season",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_series",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_dataHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_encryptedDataHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_nickname",
          "type": "string"
        }
      ],
      "name": "newCarSetup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_itemId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_review",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_date",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_sellerNickname",
          "type": "string"
        }
      ],
      "name": "newComment",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "itemId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "commentator",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "review",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "date",
              "type": "string"
            }
          ],
          "internalType": "struct STMarketplace.comment",
          "name": "comment_to_return",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purchaseId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "enum ContentMarketplace.NotificationType",
          "name": "_type",
          "type": "uint8"
        }
      ],
      "name": "newNotification",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "notificationId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_ipfsPath",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_carBrand",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_simulator",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_dataHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_encryptedDataHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_nickname",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_imagePath",
          "type": "string"
        }
      ],
      "name": "newSkin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_adId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_buyerKey",
          "type": "bytes"
        }
      ],
      "name": "requestPurchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "purchaseId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_nickname",
          "type": "string"
        }
      ],
      "name": "saveSeller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc380c812c621c93cf270455db507b99d5812d109a4d823c132167405fa1a2452",
  "receipt": {
    "to": null,
    "from": "0xF393a9865cb4f1b68813359D5D282878d5d0BdE1",
    "contractAddress": "0xe71921337a32F2a2049e85d2BDeDb1704eAf628C",
    "transactionIndex": 18,
    "gasUsed": "3691905",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x805bf9137b256d07c40b026d2557f97883a203d404ef88763a9b99648ef13688",
    "transactionHash": "0xc380c812c621c93cf270455db507b99d5812d109a4d823c132167405fa1a2452",
    "logs": [],
    "blockNumber": 8371784,
    "cumulativeGasUsed": "8915075",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x868ddF52D8b8aC93a138f06F41533E16556b8f79"
  ],
  "solcInputHash": "d68a564b93971a0b468bb364d1f39e5a",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"descartesAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedDataKey\",\"type\":\"bytes\"}],\"name\":\"PurchaseAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"descartesIndex\",\"type\":\"uint256\"}],\"name\":\"PurchaseChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSuccess\",\"type\":\"bool\"}],\"name\":\"PurchaseFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"buyerKey\",\"type\":\"bytes\"}],\"name\":\"PurchaseRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_ipfsPath\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_carBrand\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_track\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_simulator\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_season\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"carSetupSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_ipfsPath\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_carBrand\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_simulator\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"skinSaved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_encryptedDataKey\",\"type\":\"bytes\"}],\"name\":\"acceptPurchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_notificationId\",\"type\":\"uint256\"}],\"name\":\"archiveNotification\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_privateKey\",\"type\":\"bytes\"}],\"name\":\"challengePurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"descartesIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSuccess\",\"type\":\"bool\"}],\"name\":\"finalizePurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adId\",\"type\":\"uint256\"}],\"name\":\"getAd\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"ipfsPath\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"testTemplateHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ContentMarketplace.Advertisement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_adIds\",\"type\":\"uint256[]\"}],\"name\":\"getAds\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"ipfsPath\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"testTemplateHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ContentMarketplace.Advertisement[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCarSetups\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"ipfsPath\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"testTemplateHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ContentMarketplace.Advertisement\",\"name\":\"ad\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"carBrand\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"track\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"simulator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"season\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"series\",\"type\":\"string\"}],\"internalType\":\"struct STMarketplace.carSetupInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct STMarketplace.carSetup[]\",\"name\":\"setups\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getItemComments\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"commentator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"review\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"}],\"internalType\":\"struct STMarketplace.comment[]\",\"name\":\"comments_to_return\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getNickname\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_notificationIds\",\"type\":\"uint256[]\"}],\"name\":\"getNotifications\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"enum ContentMarketplace.NotificationType\",\"name\":\"nType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"archive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct ContentMarketplace.Notification[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberCars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberSellers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberSkins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"}],\"name\":\"getPurchase\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"buyerKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedDataKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"descartesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct ContentMarketplace.Purchase\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_purchaseIds\",\"type\":\"uint256[]\"}],\"name\":\"getPurchases\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"adId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"buyerKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedDataKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"descartesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct ContentMarketplace.Purchase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sellerNickname\",\"type\":\"string\"}],\"name\":\"getSellerComments\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"commentator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"review\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"}],\"internalType\":\"struct STMarketplace.comment[]\",\"name\":\"comments_to_return\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSkins\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"ipfsPath\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"testTemplateHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ContentMarketplace.Advertisement\",\"name\":\"ad\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"carBrand\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"simulator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"skinPic\",\"type\":\"string\"}],\"internalType\":\"struct STMarketplace.carSkinInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"internalType\":\"struct STMarketplace.carSkin[]\",\"name\":\"skins\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"position\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"driveLog2Size\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"directValue\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"loggerIpfsPath\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"loggerRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"waitsProvider\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"needsLogger\",\"type\":\"bool\"}],\"internalType\":\"struct DescartesInterface.Drive[]\",\"name\":\"drives\",\"type\":\"tuple[]\"}],\"name\":\"instantiateCartesiVerification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"isCarSetup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_address\",\"type\":\"uint256\"}],\"name\":\"isSkin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"listAdsPerSeller\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"listNotificationsPerUser\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_ipfsPath\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_carBrand\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_track\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_simulator\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_season\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_series\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_encryptedDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_nickname\",\"type\":\"string\"}],\"name\":\"newCarSetup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_review\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_date\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_sellerNickname\",\"type\":\"string\"}],\"name\":\"newComment\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"commentator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"review\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"date\",\"type\":\"string\"}],\"internalType\":\"struct STMarketplace.comment\",\"name\":\"comment_to_return\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"enum ContentMarketplace.NotificationType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"newNotification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"notificationId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_ipfsPath\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_carBrand\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_simulator\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_encryptedDataHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_nickname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_imagePath\",\"type\":\"string\"}],\"name\":\"newSkin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_adId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_buyerKey\",\"type\":\"bytes\"}],\"name\":\"requestPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_nickname\",\"type\":\"string\"}],\"name\":\"saveSeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"descartesAddress\":\"address of the Descartes contract\"}}},\"title\":\"Simthunder Sim Racing Marketplace - first iteration\",\"version\":1},\"userdoc\":{\"events\":{\"carSetupSaved(address,bytes,string,string,string,string,uint256)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"acceptPurchase(uint256,bytes)\":{\"notice\":\"called by seller to accept a purchase request for a registered advertisement\"},\"addressToString(address)\":{\"notice\":\"Utility method to return string from an address\"},\"challengePurchase(uint256,bytes)\":{\"notice\":\"called by buyer to challenge a purchase, stating that content could not be retrieved\"},\"constructor\":{\"notice\":\"Creates an instance of the contract\"},\"finalizePurchase(uint256,bool)\":{\"notice\":\"finalizes purchase, unlocking buyer's funds and seller's deposit as appropriate\"},\"getAd(uint256)\":{\"notice\":\"retrieves an advertisement given its identifier\"},\"getAds(uint256[])\":{\"notice\":\"retrieves an array of advertisements given their identifiers\"},\"getCarSetups()\":{\"notice\":\"Gets the list of all car setup files\"},\"getItemComments(uint256)\":{\"notice\":\"Gets the list of comments from item\"},\"getNickname(address)\":{\"notice\":\"Registers seller address\"},\"getNotifications(uint256[])\":{\"notice\":\"retrieves an array of notifications given their identifiers\"},\"getNumberCars()\":{\"notice\":\"Gets number of car setup files\"},\"getNumberSellers()\":{\"notice\":\"Gets number of sellers\"},\"getNumberSkins()\":{\"notice\":\"Gets number of skin files\"},\"getPurchase(uint256)\":{\"notice\":\"retrieves a purchase given its identifier\"},\"getPurchases(uint256[])\":{\"notice\":\"retrieves an advertisement given its identifier\"},\"getSellerComments(string)\":{\"notice\":\"Gets the list of comments from item\"},\"getSkins()\":{\"notice\":\"Gets the list of all skin files\"},\"isCarSetup(uint256)\":{\"notice\":\"Tests if car setup exists\"},\"isSeller(address)\":{\"notice\":\"Tests if sellers exists\"},\"isSkin(uint256)\":{\"notice\":\"Tests if skin exists\"},\"listAdsPerSeller(address)\":{\"notice\":\"returns identifiers for a seller's advertisements\"},\"listNotificationsPerUser(address)\":{\"notice\":\"returns identifiers for a seller's notifications\"},\"newCarSetup(bytes,string,string,string,string,string,string,uint256,bytes32,bytes32,string)\":{\"notice\":\"Registers a new car setup for sale\"},\"newComment(uint256,string,uint256,string,string)\":{\"notice\":\"Registers a new comment for item\"},\"newSkin(bytes,string,string,uint256,bytes32,bytes32,string,string)\":{\"notice\":\"Registers a new car skin for sale\"},\"requestPurchase(uint256,bytes)\":{\"notice\":\"requests purchase of a registered advertisement\"},\"saveSeller(address,string)\":{\"notice\":\"Registers seller address\"}},\"notice\":\"Non-Cartesi blockchain code for registering sellers and sim racing assets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"cache/solpp-generated-contracts/STMarketplace.sol\":\"STMarketplace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":110},\"remappings\":[]},\"sources\":{\"@cartesi/descartes-sdk/contracts/DescartesInterface.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n//                                  Apache License\\n//                            Version 2.0, January 2004\\n//                         http://www.apache.org/licenses/\\n\\n//    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\\n\\n//    1. Definitions.\\n\\n//       \\\"License\\\" shall mean the terms and conditions for use, reproduction,\\n//       and distribution as defined by Sections 1 through 9 of this document.\\n\\n//       \\\"Licensor\\\" shall mean the copyright owner or entity authorized by\\n//       the copyright owner that is granting the License.\\n\\n//       \\\"Legal Entity\\\" shall mean the union of the acting entity and all\\n//       other entities that control, are controlled by, or are under common\\n//       control with that entity. For the purposes of this definition,\\n//       \\\"control\\\" means (i) the power, direct or indirect, to cause the\\n//       direction or management of such entity, whether by contract or\\n//       otherwise, or (ii) ownership of fifty percent (50%) or more of the\\n//       outstanding shares, or (iii) beneficial ownership of such entity.\\n\\n//       \\\"You\\\" (or \\\"Your\\\") shall mean an individual or Legal Entity\\n//       exercising permissions granted by this License.\\n\\n//       \\\"Source\\\" form shall mean the preferred form for making modifications,\\n//       including but not limited to software source code, documentation\\n//       source, and configuration files.\\n\\n//       \\\"Object\\\" form shall mean any form resulting from mechanical\\n//       transformation or translation of a Source form, including but\\n//       not limited to compiled object code, generated documentation,\\n//       and conversions to other media types.\\n\\n//       \\\"Work\\\" shall mean the work of authorship, whether in Source or\\n//       Object form, made available under the License, as indicated by a\\n//       copyright notice that is included in or attached to the work\\n//       (an example is provided in the Appendix below).\\n\\n//       \\\"Derivative Works\\\" shall mean any work, whether in Source or Object\\n//       form, that is based on (or derived from) the Work and for which the\\n//       editorial revisions, annotations, elaborations, or other modifications\\n//       represent, as a whole, an original work of authorship. For the purposes\\n//       of this License, Derivative Works shall not include works that remain\\n//       separable from, or merely link (or bind by name) to the interfaces of,\\n//       the Work and Derivative Works thereof.\\n\\n//       \\\"Contribution\\\" shall mean any work of authorship, including\\n//       the original version of the Work and any modifications or additions\\n//       to that Work or Derivative Works thereof, that is intentionally\\n//       submitted to Licensor for inclusion in the Work by the copyright owner\\n//       or by an individual or Legal Entity authorized to submit on behalf of\\n//       the copyright owner. For the purposes of this definition, \\\"submitted\\\"\\n//       means any form of electronic, verbal, or written communication sent\\n//       to the Licensor or its representatives, including but not limited to\\n//       communication on electronic mailing lists, source code control systems,\\n//       and issue tracking systems that are managed by, or on behalf of, the\\n//       Licensor for the purpose of discussing and improving the Work, but\\n//       excluding communication that is conspicuously marked or otherwise\\n//       designated in writing by the copyright owner as \\\"Not a Contribution.\\\"\\n\\n//       \\\"Contributor\\\" shall mean Licensor and any individual or Legal Entity\\n//       on behalf of whom a Contribution has been received by Licensor and\\n//       subsequently incorporated within the Work.\\n\\n//    2. Grant of Copyright License. Subject to the terms and conditions of\\n//       this License, each Contributor hereby grants to You a perpetual,\\n//       worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n//       copyright license to reproduce, prepare Derivative Works of,\\n//       publicly display, publicly perform, sublicense, and distribute the\\n//       Work and such Derivative Works in Source or Object form.\\n\\n//    3. Grant of Patent License. Subject to the terms and conditions of\\n//       this License, each Contributor hereby grants to You a perpetual,\\n//       worldwide, non-exclusive, no-charge, royalty-free, irrevocable\\n//       (except as stated in this section) patent license to make, have made,\\n//       use, offer to sell, sell, import, and otherwise transfer the Work,\\n//       where such license applies only to those patent claims licensable\\n//       by such Contributor that are necessarily infringed by their\\n//       Contribution(s) alone or by combination of their Contribution(s)\\n//       with the Work to which such Contribution(s) was submitted. If You\\n//       institute patent litigation against any entity (including a\\n//       cross-claim or counterclaim in a lawsuit) alleging that the Work\\n//       or a Contribution incorporated within the Work constitutes direct\\n//       or contributory patent infringement, then any patent licenses\\n//       granted to You under this License for that Work shall terminate\\n//       as of the date such litigation is filed.\\n\\n//    4. Redistribution. You may reproduce and distribute copies of the\\n//       Work or Derivative Works thereof in any medium, with or without\\n//       modifications, and in Source or Object form, provided that You\\n//       meet the following conditions:\\n\\n//       (a) You must give any other recipients of the Work or\\n//           Derivative Works a copy of this License; and\\n\\n//       (b) You must cause any modified files to carry prominent notices\\n//           stating that You changed the files; and\\n\\n//       (c) You must retain, in the Source form of any Derivative Works\\n//           that You distribute, all copyright, patent, trademark, and\\n//           attribution notices from the Source form of the Work,\\n//           excluding those notices that do not pertain to any part of\\n//           the Derivative Works; and\\n\\n//       (d) If the Work includes a \\\"NOTICE\\\" text file as part of its\\n//           distribution, then any Derivative Works that You distribute must\\n//           include a readable copy of the attribution notices contained\\n//           within such NOTICE file, excluding those notices that do not\\n//           pertain to any part of the Derivative Works, in at least one\\n//           of the following places: within a NOTICE text file distributed\\n//           as part of the Derivative Works; within the Source form or\\n//           documentation, if provided along with the Derivative Works; or,\\n//           within a display generated by the Derivative Works, if and\\n//           wherever such third-party notices normally appear. The contents\\n//           of the NOTICE file are for informational purposes only and\\n//           do not modify the License. You may add Your own attribution\\n//           notices within Derivative Works that You distribute, alongside\\n//           or as an addendum to the NOTICE text from the Work, provided\\n//           that such additional attribution notices cannot be construed\\n//           as modifying the License.\\n\\n//       You may add Your own copyright statement to Your modifications and\\n//       may provide additional or different license terms and conditions\\n//       for use, reproduction, or distribution of Your modifications, or\\n//       for any such Derivative Works as a whole, provided Your use,\\n//       reproduction, and distribution of the Work otherwise complies with\\n//       the conditions stated in this License.\\n\\n//    5. Submission of Contributions. Unless You explicitly state otherwise,\\n//       any Contribution intentionally submitted for inclusion in the Work\\n//       by You to the Licensor shall be under the terms and conditions of\\n//       this License, without any additional terms or conditions.\\n//       Notwithstanding the above, nothing herein shall supersede or modify\\n//       the terms of any separate license agreement you may have executed\\n//       with Licensor regarding such Contributions.\\n\\n//    6. Trademarks. This License does not grant permission to use the trade\\n//       names, trademarks, service marks, or product names of the Licensor,\\n//       except as required for reasonable and customary use in describing the\\n//       origin of the Work and reproducing the content of the NOTICE file.\\n\\n//    7. Disclaimer of Warranty. Unless required by applicable law or\\n//       agreed to in writing, Licensor provides the Work (and each\\n//       Contributor provides its Contributions) on an \\\"AS IS\\\" BASIS,\\n//       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\\n//       implied, including, without limitation, any warranties or conditions\\n//       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\\n//       PARTICULAR PURPOSE. You are solely responsible for determining the\\n//       appropriateness of using or redistributing the Work and assume any\\n//       risks associated with Your exercise of permissions under this License.\\n\\n//    8. Limitation of Liability. In no event and under no legal theory,\\n//       whether in tort (including negligence), contract, or otherwise,\\n//       unless required by applicable law (such as deliberate and grossly\\n//       negligent acts) or agreed to in writing, shall any Contributor be\\n//       liable to You for damages, including any direct, indirect, special,\\n//       incidental, or consequential damages of any character arising as a\\n//       result of this License or out of the use or inability to use the\\n//       Work (including but not limited to damages for loss of goodwill,\\n//       work stoppage, computer failure or malfunction, or any and all\\n//       other commercial damages or losses), even if such Contributor\\n//       has been advised of the possibility of such damages.\\n\\n//    9. Accepting Warranty or Additional Liability. While redistributing\\n//       the Work or Derivative Works thereof, You may choose to offer,\\n//       and charge a fee for, acceptance of support, warranty, indemnity,\\n//       or other liability obligations and/or rights consistent with this\\n//       License. However, in accepting such obligations, You may act only\\n//       on Your own behalf and on Your sole responsibility, not on behalf\\n//       of any other Contributor, and only if You agree to indemnify,\\n//       defend, and hold each Contributor harmless for any liability\\n//       incurred by, or claims asserted against, such Contributor by reason\\n//       of your accepting any such warranty or additional liability.\\n\\n//    END OF TERMS AND CONDITIONS\\n\\n//    Copyright (C) 2020 Cartesi Pte. Ltd.\\n\\n//    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n//    you may not use this file except in compliance with the License.\\n//    You may obtain a copy of the License at\\n\\n//        http://www.apache.org/licenses/LICENSE-2.0\\n\\n//    Unless required by applicable law or agreed to in writing, software\\n//    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n//    See the License for the specific language governing permissions and\\n//    limitations under the License.\\n\\n/// @title DescartesInterface\\n/// @author Stephen Chen\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@cartesi/util/contracts/Instantiator.sol\\\";\\n\\n\\ninterface DescartesInterface is Instantiator {\\n\\n    enum State {\\n        WaitingProviders,\\n        ProviderMissedDeadline,\\n        WaitingChallengeDrives,\\n        WaitingReveals,\\n        WaitingClaim,\\n        ClaimerMissedDeadline,\\n        WaitingConfirmationDeadline, // \\\"Voting Phase\\\"\\n        WaitingChallengeResult, // \\\"Voting Phase\\\"\\n        ChallengerWon,\\n        ClaimerWon,\\n        ConsensusResult\\n    }\\n\\n    /*\\n    There are two types of drive, one is directDrive, and the other is loggerDrive.\\n    directDrive has content inserted to the directValue field with up to 1MB;\\n    loggerDrive has content submitted to the logger contract,\\n    which can be retrieved with driveLog2Size and loggerRootHash.\\n    The needsLogger field is set to true for loggerDrive, false for directDrive.\\n\\n    The waitsProvider field is set to true meaning the drive is not ready,\\n    and needs to be filled during the WaitingProviders phase.\\n    The provider field is the user who is responsible for filling out the drive.\\n    I.e the directValue of directDrive, or the loggerRootHash of loggerDrive\\n    */\\n    struct Drive {\\n        // start position of the drive\\n        uint64 position;\\n        // log2 size of the drive in the unit of bytes\\n        uint8 driveLog2Size;\\n        // direct value inserted to the drive\\n        bytes directValue;\\n        // ipfs object path of the logger drive\\n        bytes loggerIpfsPath;\\n        // root hash of the drive submitted to the logger\\n        bytes32 loggerRootHash;\\n        // the user who's responsible for filling out the drive\\n        address provider;\\n        // indicates the drive needs to wait for the provider to provide content\\n        bool waitsProvider;\\n        // indicates the content of the drive must be retrieved from logger\\n        bool needsLogger;\\n    }\\n\\n    struct Party {\\n        bool isParty;\\n        bool hasVoted;\\n        bool hasCheated;\\n        uint64 arrayIdx;\\n    }\\n\\n    /// @notice Instantiate a Descartes SDK instance.\\n    /// @param _finalTime max cycle of the machine for that computation\\n    /// @param _templateHash hash of the machine with all drives empty\\n    /// @param _outputPosition position of the output drive\\n    /// @param _roundDuration duration of the round (security param)\\n    /// @param _inputDrives an array of drive which assemble the machine\\n    /// @return uint256, Descartes index\\n    function instantiate(\\n        uint256 _finalTime,\\n        bytes32 _templateHash,\\n        uint64 _outputPosition,\\n        uint8 _outputLog2Size,\\n        uint256 _roundDuration,\\n        address[] memory parties,\\n        Drive[] memory _inputDrives) external returns (uint256);\\n\\n    /// @notice Get result of a finished instance.\\n    /// @param _index index of Descartes instance to get result\\n    /// @return bool, indicates the result is ready\\n    /// @return bool, indicates the sdk is still running\\n    /// @return address, the user to blame for the abnormal stop of the sdk\\n    /// @return bytes32, the result of the sdk if available\\n    function getResult(uint256 _index) external view returns (\\n        bool,\\n        bool,\\n        address,\\n        bytes memory);\\n\\n    /// @notice Deactivate a Descartes SDK instance.\\n    /// @param _index index of Descartes instance to deactivate\\n    function destruct(uint256 _index) external;\\n}\\n\",\"keccak256\":\"0x9efd75dd65254d360675e5a439c8a24fd15795d05b062a68130e9ed62190e403\",\"license\":\"Apache-2.0\"},\"@cartesi/util/contracts/Instantiator.sol\":{\"content\":\"// Copyright 2020 Cartesi Pte. Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\n\\npragma solidity ^0.7.0;\\n\\n\\ninterface Instantiator {\\n\\n    modifier onlyInstantiated(uint256 _index) virtual;\\n\\n    modifier onlyActive(uint256 _index) virtual;\\n\\n    modifier increasesNonce(uint256 _index) virtual;\\n\\n    function isActive(uint256 _index) external view returns (bool);\\n\\n    function getNonce(uint256 _index) external view returns (uint256);\\n\\n    function isConcerned(uint256 _index, address _user) external view returns (bool);\\n\\n    function getSubInstances(uint256 _index, address) external view returns (address[] memory _addresses, uint256[] memory _indices);\\n}\\n\",\"keccak256\":\"0x416e612dc09b10765de32ec06cf0a7ee4e050e16db8bf3b8ad832a6082b7dfd6\",\"license\":\"Apache-2.0\"},\"cache/solpp-generated-contracts/ContentMarketplace.sol\":{\"content\":\"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\nimport \\\"@cartesi/descartes-sdk/contracts/DescartesInterface.sol\\\";\\n\\ncontract ContentMarketplace {\\n\\n    DescartesInterface descartes;\\n\\n    /// @notice records necessary information for an advertisement\\n    struct Advertisement {\\n        address payable seller;       // seller address\\n        uint256 price;                // trade price\\n        bytes32 dataHash;             // merkle hash of unencrypted data\\n        bytes32 encryptedDataHash;    // merkle hash of encrypted data\\n        bytes ipfsPath;               // ipfs path of encrypted data\\n        bytes32 testTemplateHash;     // hash of the machine representing the test procedure for decrypted data\\n    }\\n\\n    /// @notice records information regarding a purchase\\n    struct Purchase {\\n        uint256 adId;\\n        address payable buyer;\\n        bytes buyerKey;\\n        bytes encryptedDataKey;\\n        uint256 descartesIndex;  // descartes computation that will verify the challenge\\n        uint256 date;            // purchase date\\n    }\\n\\n    enum NotificationType { Request, Accept_A, Challenge, Accept_B, Reject }\\n    // @notice full representation of a notification\\n    struct Notification {\\n        uint256 purchaseId;       // purchase information\\n        string message;           // generic message\\n        NotificationType nType;   // type of notification\\n        bool archive;             // archived notification\\n        uint256 date;             // notification date\\n        address sender;           // notification from address\\n        address receiver;         // notification to address\\n    }\\n\\n    // storage of advertisements\\n    uint256 numAds = 0;\\n    mapping(uint256 => Advertisement) internal ads;\\n    mapping(address => uint256[]) internal adsPerSeller;\\n\\n    // storage of purchases\\n    uint256 numPurchases = 0;\\n    mapping(uint256 => Purchase) internal purchases;\\n    mapping(uint256 => uint256[]) internal purchasesPerAd;\\n\\n    // storage of notifications\\n    uint256 numNotifications = 0;\\n    mapping(uint256 => Notification) notifications;\\n    mapping(address => uint256[]) notificationsPerUser;\\n\\n    // purchase events\\n    event PurchaseRequested(uint256 adId, uint256 purchaseId, address buyer, bytes buyerKey);\\n    event PurchaseAccepted(uint256 adId, uint256 purchaseId, bytes encryptedDataKey);\\n    event PurchaseChallenged(uint256 adId, uint256 purchaseId, uint256 descartesIndex);\\n    event PurchaseFinalized(uint256 adId, uint256 purchaseId, bool isSuccess);\\n\\n\\n    /// @param descartesAddress address of the Descartes contract\\n    constructor(address descartesAddress) {\\n        // TODO retrieve Descartes interface from the address\\n        descartes = DescartesInterface(descartesAddress);\\n    }\\n\\n    /// @notice creates a new advertisement for published and encrypted content\\n    function createAd(\\n        uint256 _price,                // trade price\\n        bytes32 _dataHash,             // merkle hash of unencrypted data\\n        bytes32 _encryptedDataHash,    // merkle hash of encrypted data\\n        bytes memory _ipfsPath,        // ipfs path of encrypted data\\n        bytes32 _testTemplateHash      // hash of the machine representing the test procedure for decrypted data\\n    ) internal\\n        returns (uint256 adId)          // returns ad identifier\\n    {\\n        Advertisement storage ad = ads[numAds];\\n        ad.seller = msg.sender;\\n        ad.price = _price;\\n        ad.dataHash = _dataHash;\\n        ad.encryptedDataHash = _encryptedDataHash;\\n        ad.ipfsPath = _ipfsPath;\\n        ad.testTemplateHash = _testTemplateHash;\\n\\n        adId = numAds++;\\n        adsPerSeller[ad.seller].push(adId);\\n\\n        return adId;\\n    }\\n\\n    /// @notice retrieves an advertisement given its identifier\\n    function getAd(uint256 _adId) public view\\n        returns (Advertisement memory)\\n    {\\n        return ads[_adId];\\n    }\\n\\n    /// @notice retrieves an array of advertisements given their identifiers\\n    function getAds(uint256[] memory _adIds) public view\\n        returns (Advertisement[] memory)\\n    {\\n        Advertisement[] memory ret = new Advertisement[](_adIds.length);\\n        for(uint256 i = 0; i < _adIds.length; i++) {\\n            uint256 id = _adIds[i];\\n            ret[i] = ads[id];\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice returns identifiers for a seller's advertisements\\n    function listAdsPerSeller(address _seller) public view\\n        returns (uint256[] memory)\\n    {\\n        return adsPerSeller[_seller];\\n    }\\n\\n    /// @notice retrieves a purchase given its identifier\\n    function getPurchase(uint256 _purchaseId) public view virtual\\n        returns (Purchase memory)\\n    {\\n        return purchases[_purchaseId];\\n    }\\n\\n    /// @notice retrieves an advertisement given its identifier\\n    function getPurchases(uint256[] memory _purchaseIds) public view\\n        returns (Purchase[] memory)\\n    {\\n        Purchase[] memory ret = new Purchase[](_purchaseIds.length);\\n        for(uint256 i = 0; i < _purchaseIds.length; i++) {\\n            uint256 id = _purchaseIds[i];\\n            ret[i] = purchases[id];\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice requests purchase of a registered advertisement\\n    function requestPurchase(\\n        uint256 _adId,                 // ad identifier\\n        bytes memory _buyerKey         // buyer's public key used for encrypting messages so that only the buyer can see\\n    ) public\\n        payable                        // funds matching ad price, which will be locked until purchase is finalized\\n        returns (uint256 purchaseId)   // returns purchase request identifier\\n    {\\n        // TODO: ensure ad exists\\n        // TODO: ensure funds are adequade\\n        Advertisement memory ad = getAd(_adId);\\n        require(msg.value == (ad.price),\\\"Amount should be equal to the item price\\\");\\n\\n        // stores purchase info\\n        Purchase storage purchase = purchases[numPurchases];\\n        purchase.adId = _adId;\\n        purchase.buyer = msg.sender;\\n        purchase.buyerKey = _buyerKey;\\n        purchase.date = block.timestamp;\\n\\n        purchaseId = numPurchases++;\\n        purchasesPerAd[purchase.adId].push(purchaseId);\\n\\n        newNotification(purchaseId, \\\"Purchase was requested\\\", msg.sender, ad.seller, NotificationType.Request);\\n\\n        emit PurchaseRequested(purchase.adId, purchaseId, purchase.buyer, purchase.buyerKey);\\n        return purchaseId;\\n    }\\n\\n    /// @notice called by seller to accept a purchase request for a registered advertisement\\n    function acceptPurchase(\\n        uint256 _purchaseId,           // purchase request identifier\\n        bytes memory _encryptedDataKey // key for decrypting data, encrypted using buyer's public key\\n    ) public\\n        payable                        // deposit sent by the seller that will be locked until purchase is finalized\\n    {\\n        // TODO...\\n\\n        Purchase storage purchase = purchases[_purchaseId];\\n        purchase.encryptedDataKey = _encryptedDataKey;\\n\\n        newNotification(_purchaseId, \\\"Thank you for your purchase. Please check item.\\\", msg.sender, purchase.buyer, NotificationType.Accept_A);\\n    \\n        emit PurchaseAccepted(purchase.adId, _purchaseId, _encryptedDataKey);\\n    }\\n\\n\\n    /// @notice called by buyer to challenge a purchase, stating that content could not be retrieved\\n    function challengePurchase(\\n        uint256 _purchaseId,           // purchase request identifier\\n        bytes memory _privateKey       // buyer's private key used to decrypt the data key\\n    ) public\\n        returns (uint256 descartesIndex)  // returns index of the descartes computation that will verify the challenge\\n    {\\n        // TODO...\\n\\n        Purchase memory purchase = getPurchase(_purchaseId);\\n        Advertisement memory ad = getAd(purchase.adId);\\n\\n        newNotification(_purchaseId, \\\"Purchase was challenged\\\", msg.sender, ad.seller, NotificationType.Challenge);\\n\\n        emit PurchaseChallenged(purchase.adId, _purchaseId, descartesIndex);\\n        return descartesIndex;\\n    }\\n\\n    /// @notice finalizes purchase, unlocking buyer's funds and seller's deposit as appropriate\\n    function finalizePurchase(\\n        uint256 _purchaseId,            // purchase request identifier\\n        bool isSuccess\\n    ) public {\\n        Purchase memory purchase = getPurchase(_purchaseId);\\n        Advertisement memory ad = getAd(purchase.adId);\\n\\n        address payable accountAddress = isSuccess ? ad.seller : purchase.buyer;\\n        accountAddress.transfer(ad.price);\\n\\n        if(isSuccess) {\\n            newNotification(_purchaseId, \\\"Purchase was accepted.\\\", msg.sender, ad.seller, NotificationType.Accept_B);\\n        }\\n        else {\\n            newNotification(_purchaseId, \\\"Purchase was rejected.\\\", msg.sender, ad.seller, NotificationType.Reject);\\n        }\\n\\n        emit PurchaseFinalized(purchase.adId, _purchaseId, isSuccess); \\n    }\\n\\n    // @notice create notification\\n    function newNotification(\\n        uint256 _purchaseId,           // purchase request identifier\\n        string memory _message,        // generic message\\n        address _sender,               // who sends the message\\n        address _receiver,             // who receives the message\\n        NotificationType _type         // type of notification\\n    ) public\\n        returns (uint256 notificationId)           // returns notification identifier\\n    {\\n        Notification storage notification = notifications[numNotifications];\\n        notification.purchaseId = _purchaseId;\\n        notification.message = _message;\\n        notification.nType = _type;\\n        notification.archive = false;\\n        notification.date = block.timestamp;\\n        notification.sender = _sender;\\n        notification.receiver = _receiver;\\n\\n        notificationId = numNotifications++;\\n        //notificationsPerSeller[ads[purchases[_purchaseId].adId].seller].push(notificationId);\\n        notificationsPerUser[_receiver].push(notificationId);\\n\\n        return notificationId;\\n    }\\n\\n    /// @notice retrieves an array of notifications given their identifiers\\n    function getNotifications(uint256[] memory _notificationIds) public view\\n        returns (Notification[] memory)\\n    {\\n        Notification[] memory ret = new Notification[](_notificationIds.length);\\n        for(uint256 i = 0; i < _notificationIds.length; i++) {\\n            uint256 id = _notificationIds[i];\\n            ret[i] = notifications[id];\\n        }\\n        return ret;\\n    }\\n\\n    /// @notice returns identifiers for a seller's notifications\\n    function listNotificationsPerUser(address _user) public view\\n        returns (uint256[] memory)\\n    {\\n        return notificationsPerUser[_user];\\n    }\\n\\n    function archiveNotification(uint256 _notificationId) public {\\n        notifications[_notificationId].archive = true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4654611a9462c4538ad21b850d6f954ae1f484c9f238f2622a11d3ba95f36b5e\"},\"cache/solpp-generated-contracts/STMarketplace.sol\":{\"content\":\"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\n\\n\\nimport \\\"./ContentMarketplace.sol\\\";\\n\\n/// @title Simthunder Sim Racing Marketplace - first iteration\\n/// @notice Non-Cartesi blockchain code for registering sellers and sim racing assets\\n\\ncontract STMarketplace is ContentMarketplace {   \\n\\n    bytes32 templateHash = 0x565ed3f9210522787f757fd3a4d2cb1714cd46523bcef460d3d630cd5a29c3aa;\\n    uint64 outputPosition = 0xc000000000000000;\\n    uint8 outputLog2Size = 5;\\n    uint256 finalTime = 1e11;\\n    uint256 roundDuration = 51;\\n    //DescartesInterface.Drive[] drives;\\n\\n    // defines password size as 1024 bytes\\n    // uint64 passwordLog2Size = 10;\\n\\n    // cartesi machine template used to validate each asset category\\n    bytes32 validateCarSetupTemplateHash = \\\"0x123\\\";\\n    bytes32 validateCarSkinTemplateHash = \\\"0x456\\\";\\n    \\n    // holds information specific to a car setup file\\n    struct carSetupInfo {\\n        string carBrand;\\n        string track;\\n        string simulator;\\n        string season;\\n        string description;\\n        string series;\\n    }\\n       \\n    // holds information specific to a car skin file\\n    struct carSkinInfo {\\n        string carBrand;\\n        string simulator;\\n        string skinPic;\\n    }\\n       \\n    // full representation of an advertised car setup\\n    struct carSetup {\\n        uint256 id;         // id of the advertisement\\n        Advertisement ad;   // generic ad information, including seller and content\\n        carSetupInfo info;  // specific car setup information\\n    }\\n       \\n    // full representation of an advertised car skin\\n    struct carSkin {\\n        uint256 id;         // id of the advertisement\\n        Advertisement ad;   // generic ad information, including seller and content\\n        carSkinInfo info;   // specific car skin information\\n    }\\n\\n    // full representation of comment\\n    struct comment {\\n        uint256 itemId;\\n        address commentator;\\n        string description;\\n        uint256 review;\\n        string date;   \\n    }\\n\\n    // /// @notice To track comments from item\\n    mapping(uint256 => comment[]) itemComments;\\n    mapping(string => comment[]) sellerComments;\\n\\n    // /// @notice Maps the 2 type of files\\n    mapping(uint256 => carSetupInfo) carSetupInfos;\\n    mapping(uint256 => carSkinInfo) carSkinInfos;\\n    uint256[] carSetupIds;\\n    uint256[] carSkinIds;\\n    \\n    // /// @notice To track if seller address already exists\\n    mapping (address => bool) userExists;\\n\\n    // /// @notice To mapping user and his nickname\\n    mapping (address => string) userNickname;\\n    \\n    // /// @notice Keep track of all seller addresses and existing files\\n    address[] private userAddresses;\\n\\n    /// @notice Events\\n    event carSetupSaved(address _address, bytes _ipfsPath, string _carBrand, string _track, string _simulator, string _season, uint256 _price);\\n    event skinSaved(address _address, bytes _ipfsPath, string _carBrand, string _simulator, uint256 _price);\\n    \\n    /// @notice Creates an instance of the contract\\n    /// @param descartesAddress address of the Descartes contract\\n    constructor(address descartesAddress) ContentMarketplace(descartesAddress) {\\n    }    \\n    \\n    /// @notice Registers a new car setup for sale\\n    function newCarSetup(\\n        bytes memory _ipfsPath,        // ipfs path of encrypted data\\n        string memory _carBrand,\\n        string memory _track,\\n        string memory _simulator,\\n        string memory _season,\\n        string memory _series,\\n        string memory _description,\\n        uint256 _price,                // trade price\\n        bytes32 _dataHash,             // merkle hash of unencrypted data\\n        bytes32 _encryptedDataHash,    // merkle hash of encrypted data\\n        string memory _nickname\\n    ) public\\n        returns (uint256 id)           // returns ad identifier\\n    {\\n        id = createAd(\\n            _price,\\n            _dataHash,\\n            _encryptedDataHash,\\n            _ipfsPath,\\n            validateCarSetupTemplateHash\\n        );\\n\\n        carSetupInfo storage info = carSetupInfos[id];\\n        info.carBrand = _carBrand;\\n        info.track = _track;\\n        info.simulator = _simulator;\\n        info.season = _season;\\n        info.series = _series;\\n        info.description = _description;\\n        \\n        carSetupIds.push(id);\\n        saveSeller(msg.sender, _nickname);\\n\\n        emit carSetupSaved(msg.sender, _ipfsPath, _carBrand, _track, _simulator, _season, _price);\\n\\n        return id;\\n    }\\n\\n    /// @notice Registers a new car skin for sale\\n    function newSkin(\\n        bytes memory _ipfsPath,        // ipfs path of encrypted data\\n        string memory _carBrand,\\n        string memory _simulator,\\n        uint256 _price,                // trade price\\n        bytes32 _dataHash,             // merkle hash of unencrypted data\\n        bytes32 _encryptedDataHash,    // merkle hash of encrypted data\\n        string memory _nickname,\\n        string memory _imagePath       // ipfs path for image skin\\n    ) public\\n        returns (uint256 id)           // returns ad identifier\\n    {\\n        id = createAd(\\n            _price,\\n            _dataHash,\\n            _encryptedDataHash,\\n            _ipfsPath,\\n            validateCarSkinTemplateHash\\n        );\\n\\n        carSkinInfo storage info = carSkinInfos[id];\\n        info.carBrand = _carBrand;\\n        info.simulator = _simulator;\\n        info.skinPic = _imagePath;\\n\\n        carSkinIds.push(id);\\n        saveSeller(msg.sender, _nickname);\\n        emit skinSaved (msg.sender,_ipfsPath, _carBrand, _simulator, _price);\\n\\n        return id;\\n    }\\n\\n     /// @notice Registers a new comment for item\\n    function newComment(\\n        uint256 _itemId,\\n        string memory _description,\\n        uint256 _review,\\n        string memory _date,\\n        string memory _sellerNickname\\n    ) public\\n        returns (comment memory comment_to_return)\\n    {\\n        comment memory _comment = comment(_itemId, msg.sender, _description, _review, _date);\\n        itemComments[_itemId].push(_comment);\\n        sellerComments[_sellerNickname].push(_comment);\\n        return _comment;\\n    }\\n\\n    /// @notice Registers seller address\\n    function saveSeller(address _address, string memory _nickname) public returns(bool){\\n        if(userExists[_address] == false) {\\n            userExists[_address] = true;\\n            userAddresses.push(_address);\\n            userNickname[_address] = _nickname;\\n            return true;    \\n        }\\n        return false;\\n    }\\n\\n    /// @notice Registers seller address\\n    function getNickname(address _address) public returns(string memory) {\\n        return userNickname[_address];\\n    }\\n    \\n    /// @notice Gets the list of all car setup files\\n    function getCarSetups() public view returns(carSetup[] memory setups){\\n        setups = new carSetup[](carSetupIds.length);\\n        for (uint256 i = 0; i < carSetupIds.length; i++) {\\n            uint256 id = carSetupIds[i];\\n            setups[i].id = id;\\n            setups[i].ad = ads[id];\\n            setups[i].info = carSetupInfos[id];\\n        }\\n        return setups;\\n    }\\n    \\n    /// @notice Gets the list of all skin files\\n    function getSkins() public view returns(carSkin[] memory skins){\\n        skins = new carSkin[](carSkinIds.length);\\n        for(uint256 i = 0; i < carSkinIds.length; i++) {\\n            uint256 id = carSkinIds[i];\\n            skins[i].id = id;\\n            skins[i].ad = ads[id];\\n            skins[i].info = carSkinInfos[id];\\n        }\\n        return skins;\\n    }\\n\\n    /// @notice Gets the list of comments from item\\n     function getItemComments(uint256 _itemId) public view returns(comment[] memory comments_to_return) {\\n        return itemComments[_itemId];\\n    }\\n\\n    /// @notice Gets the list of comments from item\\n     function getSellerComments(string memory _sellerNickname) public view returns(comment[] memory comments_to_return) {\\n        return sellerComments[_sellerNickname];\\n    }\\n\\n    /// @notice Tests if car setup exists\\n    function isCarSetup(uint256 _address) public view returns(bool) {\\n        for(uint256 i = 0; i < carSetupIds.length; i++) {\\n            uint256 id = carSetupIds[i];\\n            if(id == _address) { return true; }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Tests if skin exists\\n    function isSkin(uint256 _address) public view returns(bool) {\\n        for(uint256 i = 0; i < carSkinIds.length; i++) {\\n            uint256 id = carSkinIds[i];\\n            if(id == _address) { return true; }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Tests if sellers exists\\n    function isSeller(address _address) public view returns(bool) {\\n        return userExists[_address];\\n    }\\n    \\n    /// @notice Gets number of sellers\\n    function getNumberSellers() public view returns(uint256) {\\n        return userAddresses.length;\\n    }\\n    \\n    /// @notice Gets number of car setup files\\n    function getNumberCars() public view returns(uint256) {\\n        return carSetupIds.length;\\n    }\\n    \\n    /// @notice Gets number of skin files\\n    function getNumberSkins() public view returns(uint256) {\\n        return carSkinIds.length;\\n    }\\n    \\n    /// @notice Utility method to return string from an address\\n    function addressToString(address _addr) public pure returns(string memory) \\n    {\\n        bytes32 value = bytes32(uint256(_addr));\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(51);\\n        str[0] = '0';\\n        str[1] = 'x';\\n        for (uint256 i = 0; i < 20; i++) {\\n            str[2+i*2] = alphabet[uint8(value[i + 12] >> 4)];\\n            str[3+i*2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n\\n    function instantiateCartesiVerification(address claimer, address challenger, uint256 _purchaseId, DescartesInterface.Drive[] memory drives) public returns (uint256 index) \\n    {\\n        address[] memory actors = new address[](2);\\n        actors[0] = claimer;\\n        actors[1] = challenger;\\n\\n        Purchase storage purchase = purchases[_purchaseId];\\n        Advertisement memory ad = getAd(purchase.adId);\\n\\n        index = descartes.instantiate(\\n            finalTime,\\n            templateHash,\\n            outputPosition,\\n            outputLog2Size,\\n            roundDuration,\\n            actors,\\n            drives\\n        );\\n\\n        purchase.descartesIndex = index;\\n\\n        newNotification(_purchaseId, \\\"Purchase was challenged. Check status.\\\", address(0), ad.seller, NotificationType.Challenge);\\n        newNotification(_purchaseId, \\\"Challenged purchase. Check status.\\\", address(0), msg.sender, NotificationType.Challenge);\\n\\n        return index;\\n    }\\n\\n    function getResult(uint256 index) public view returns (bool, bool, address, bytes memory) {\\n        return descartes.getResult(index);\\n    }\\n}\",\"keccak256\":\"0x892d768c0bbdae4d08832cc1787eaf80db62ca2aee76e9719bc687205dd448e3\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "descartesAddress": "address of the Descartes contract"
        }
      }
    },
    "title": "Simthunder Sim Racing Marketplace - first iteration",
    "version": 1
  },
  "userdoc": {
    "events": {
      "carSetupSaved(address,bytes,string,string,string,string,uint256)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "acceptPurchase(uint256,bytes)": {
        "notice": "called by seller to accept a purchase request for a registered advertisement"
      },
      "addressToString(address)": {
        "notice": "Utility method to return string from an address"
      },
      "challengePurchase(uint256,bytes)": {
        "notice": "called by buyer to challenge a purchase, stating that content could not be retrieved"
      },
      "constructor": {
        "notice": "Creates an instance of the contract"
      },
      "finalizePurchase(uint256,bool)": {
        "notice": "finalizes purchase, unlocking buyer's funds and seller's deposit as appropriate"
      },
      "getAd(uint256)": {
        "notice": "retrieves an advertisement given its identifier"
      },
      "getAds(uint256[])": {
        "notice": "retrieves an array of advertisements given their identifiers"
      },
      "getCarSetups()": {
        "notice": "Gets the list of all car setup files"
      },
      "getItemComments(uint256)": {
        "notice": "Gets the list of comments from item"
      },
      "getNickname(address)": {
        "notice": "Registers seller address"
      },
      "getNotifications(uint256[])": {
        "notice": "retrieves an array of notifications given their identifiers"
      },
      "getNumberCars()": {
        "notice": "Gets number of car setup files"
      },
      "getNumberSellers()": {
        "notice": "Gets number of sellers"
      },
      "getNumberSkins()": {
        "notice": "Gets number of skin files"
      },
      "getPurchase(uint256)": {
        "notice": "retrieves a purchase given its identifier"
      },
      "getPurchases(uint256[])": {
        "notice": "retrieves an advertisement given its identifier"
      },
      "getSellerComments(string)": {
        "notice": "Gets the list of comments from item"
      },
      "getSkins()": {
        "notice": "Gets the list of all skin files"
      },
      "isCarSetup(uint256)": {
        "notice": "Tests if car setup exists"
      },
      "isSeller(address)": {
        "notice": "Tests if sellers exists"
      },
      "isSkin(uint256)": {
        "notice": "Tests if skin exists"
      },
      "listAdsPerSeller(address)": {
        "notice": "returns identifiers for a seller's advertisements"
      },
      "listNotificationsPerUser(address)": {
        "notice": "returns identifiers for a seller's notifications"
      },
      "newCarSetup(bytes,string,string,string,string,string,string,uint256,bytes32,bytes32,string)": {
        "notice": "Registers a new car setup for sale"
      },
      "newComment(uint256,string,uint256,string,string)": {
        "notice": "Registers a new comment for item"
      },
      "newSkin(bytes,string,string,uint256,bytes32,bytes32,string,string)": {
        "notice": "Registers a new car skin for sale"
      },
      "requestPurchase(uint256,bytes)": {
        "notice": "requests purchase of a registered advertisement"
      },
      "saveSeller(address,string)": {
        "notice": "Registers seller address"
      }
    },
    "notice": "Non-Cartesi blockchain code for registering sellers and sim racing assets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 143,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "descartes",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(DescartesInterface)86"
      },
      {
        "astId": 193,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "numAds",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 197,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "ads",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Advertisement)156_storage)"
      },
      {
        "astId": 202,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "adsPerSeller",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 205,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "numPurchases",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 209,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "purchases",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Purchase)169_storage)"
      },
      {
        "astId": 214,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "purchasesPerAd",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 217,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "numNotifications",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 221,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "notifications",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Notification)190_storage)"
      },
      {
        "astId": 226,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "notificationsPerUser",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 907,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "templateHash",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 910,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "outputPosition",
        "offset": 0,
        "slot": "11",
        "type": "t_uint64"
      },
      {
        "astId": 913,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "outputLog2Size",
        "offset": 8,
        "slot": "11",
        "type": "t_uint8"
      },
      {
        "astId": 916,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "finalTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 919,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "roundDuration",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 922,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "validateCarSetupTemplateHash",
        "offset": 0,
        "slot": "14",
        "type": "t_bytes32"
      },
      {
        "astId": 925,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "validateCarSkinTemplateHash",
        "offset": 0,
        "slot": "15",
        "type": "t_bytes32"
      },
      {
        "astId": 975,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "itemComments",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_array(t_struct(comment)970_storage)dyn_storage)"
      },
      {
        "astId": 980,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "sellerComments",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(comment)970_storage)dyn_storage)"
      },
      {
        "astId": 984,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "carSetupInfos",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(carSetupInfo)938_storage)"
      },
      {
        "astId": 988,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "carSkinInfos",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_struct(carSkinInfo)945_storage)"
      },
      {
        "astId": 991,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "carSetupIds",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 994,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "carSkinIds",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 998,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "userExists",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1002,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "userNickname",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 1005,
        "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
        "label": "userAddresses",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(comment)970_storage)dyn_storage": {
        "base": "t_struct(comment)970_storage",
        "encoding": "dynamic_array",
        "label": "struct STMarketplace.comment[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(DescartesInterface)86": {
        "encoding": "inplace",
        "label": "contract DescartesInterface",
        "numberOfBytes": "20"
      },
      "t_enum(NotificationType)175": {
        "encoding": "inplace",
        "label": "enum ContentMarketplace.NotificationType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(comment)970_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct STMarketplace.comment[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(comment)970_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(comment)970_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct STMarketplace.comment[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(comment)970_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Advertisement)156_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ContentMarketplace.Advertisement)",
        "numberOfBytes": "32",
        "value": "t_struct(Advertisement)156_storage"
      },
      "t_mapping(t_uint256,t_struct(Notification)190_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ContentMarketplace.Notification)",
        "numberOfBytes": "32",
        "value": "t_struct(Notification)190_storage"
      },
      "t_mapping(t_uint256,t_struct(Purchase)169_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ContentMarketplace.Purchase)",
        "numberOfBytes": "32",
        "value": "t_struct(Purchase)169_storage"
      },
      "t_mapping(t_uint256,t_struct(carSetupInfo)938_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct STMarketplace.carSetupInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(carSetupInfo)938_storage"
      },
      "t_mapping(t_uint256,t_struct(carSkinInfo)945_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct STMarketplace.carSkinInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(carSkinInfo)945_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Advertisement)156_storage": {
        "encoding": "inplace",
        "label": "struct ContentMarketplace.Advertisement",
        "members": [
          {
            "astId": 145,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 147,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 149,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "dataHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 151,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "encryptedDataHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 153,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "ipfsPath",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          },
          {
            "astId": 155,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "testTemplateHash",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Notification)190_storage": {
        "encoding": "inplace",
        "label": "struct ContentMarketplace.Notification",
        "members": [
          {
            "astId": 177,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "purchaseId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 179,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "message",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 181,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "nType",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(NotificationType)175"
          },
          {
            "astId": 183,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "archive",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 185,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "date",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 187,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "sender",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 189,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "receiver",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Purchase)169_storage": {
        "encoding": "inplace",
        "label": "struct ContentMarketplace.Purchase",
        "members": [
          {
            "astId": 158,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "adId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 160,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "buyer",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 162,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "buyerKey",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 164,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "encryptedDataKey",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 166,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "descartesIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 168,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "date",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(carSetupInfo)938_storage": {
        "encoding": "inplace",
        "label": "struct STMarketplace.carSetupInfo",
        "members": [
          {
            "astId": 927,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "carBrand",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 929,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "track",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 931,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "simulator",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 933,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "season",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 935,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 937,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "series",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(carSkinInfo)945_storage": {
        "encoding": "inplace",
        "label": "struct STMarketplace.carSkinInfo",
        "members": [
          {
            "astId": 940,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "carBrand",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 942,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "simulator",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 944,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "skinPic",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(comment)970_storage": {
        "encoding": "inplace",
        "label": "struct STMarketplace.comment",
        "members": [
          {
            "astId": 961,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "itemId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 963,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "commentator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 965,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 967,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "review",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 969,
            "contract": "cache/solpp-generated-contracts/STMarketplace.sol:STMarketplace",
            "label": "date",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}